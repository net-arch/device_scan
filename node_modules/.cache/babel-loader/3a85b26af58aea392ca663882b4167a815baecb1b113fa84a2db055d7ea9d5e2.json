{"ast":null,"code":"// get_ips.ts\nimport { execSync } from 'child_process';\nimport { writeFileSync } from 'fs';\nasync function getIps() {\n  const ipMacPairs = [];\n  const arpOutput = execSync('arp -a').toString();\n  for (const line of arpOutput.split('\\n')) {\n    const parts = line.split(' ');\n    if (parts.length > 3) {\n      const ip = parts[1].replace(/[()]/g, '');\n      const mac = parts[3];\n      const serviceInfo = parts[0];\n      if (!ipMacPairs.some(pair => pair.ip === ip)) {\n        ipMacPairs.push({\n          ip,\n          mac,\n          serviceInfo\n        });\n      }\n    }\n  }\n  console.log(ipMacPairs); // for debug\n  // JSON 形式でファイルに保存\n  writeFileSync('./scripts/result.json', JSON.stringify(ipMacPairs, null, 2));\n  return ipMacPairs;\n}\nif (require.main === module) {\n  getIps();\n}\nexport { getIps };","map":{"version":3,"names":["execSync","writeFileSync","getIps","ipMacPairs","arpOutput","toString","line","split","parts","length","ip","replace","mac","serviceInfo","some","pair","push","console","log","JSON","stringify","require","main","module"],"sources":["/Users/sf/ghq/github.com/Fukuda-Sakito/device_scan/src/scripts/get_ips.ts"],"sourcesContent":["// get_ips.ts\nimport { execSync } from 'child_process';\nimport { writeFileSync } from 'fs';\n\nexport type IpMacPair = {\n  ip: string;\n  mac: string;\n  serviceInfo: string;\n};\n\nasync function getIps(): Promise<IpMacPair[]> {\n  const ipMacPairs: IpMacPair[] = [];\n  const arpOutput: string = execSync('arp -a').toString();\n\n  for (const line of arpOutput.split('\\n')) {\n    const parts: string[] = line.split(' ');\n    if (parts.length > 3) {\n      const ip: string = parts[1].replace(/[()]/g, '');\n      const mac: string = parts[3];\n      const serviceInfo: string = parts[0];\n      if (!ipMacPairs.some(pair => pair.ip === ip)) {\n        ipMacPairs.push({ ip, mac, serviceInfo });\n      }\n    }\n  }\n  console.log(ipMacPairs);  // for debug\n  // JSON 形式でファイルに保存\n  writeFileSync('./scripts/result.json', JSON.stringify(ipMacPairs, null, 2));\n\n  return ipMacPairs;\n}\n\nif (require.main === module) {\n  getIps();\n}\n\nexport { getIps };"],"mappings":"AAAA;AACA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,aAAa,QAAQ,IAAI;AAQlC,eAAeC,MAAMA,CAAA,EAAyB;EAC5C,MAAMC,UAAuB,GAAG,EAAE;EAClC,MAAMC,SAAiB,GAAGJ,QAAQ,CAAC,QAAQ,CAAC,CAACK,QAAQ,CAAC,CAAC;EAEvD,KAAK,MAAMC,IAAI,IAAIF,SAAS,CAACG,KAAK,CAAC,IAAI,CAAC,EAAE;IACxC,MAAMC,KAAe,GAAGF,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IACvC,IAAIC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,EAAU,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;MAChD,MAAMC,GAAW,GAAGJ,KAAK,CAAC,CAAC,CAAC;MAC5B,MAAMK,WAAmB,GAAGL,KAAK,CAAC,CAAC,CAAC;MACpC,IAAI,CAACL,UAAU,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC,EAAE;QAC5CP,UAAU,CAACa,IAAI,CAAC;UAAEN,EAAE;UAAEE,GAAG;UAAEC;QAAY,CAAC,CAAC;MAC3C;IACF;EACF;EACAI,OAAO,CAACC,GAAG,CAACf,UAAU,CAAC,CAAC,CAAE;EAC1B;EACAF,aAAa,CAAC,uBAAuB,EAAEkB,IAAI,CAACC,SAAS,CAACjB,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EAE3E,OAAOA,UAAU;AACnB;AAEA,IAAIkB,OAAO,CAACC,IAAI,KAAKC,MAAM,EAAE;EAC3BrB,MAAM,CAAC,CAAC;AACV;AAEA,SAASA,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}