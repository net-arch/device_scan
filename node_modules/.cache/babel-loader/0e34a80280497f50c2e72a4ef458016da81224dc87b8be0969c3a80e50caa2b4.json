{"ast":null,"code":"import { execSync } from 'child_process'; // Node で外部コマンドを実行するためのモジュール。bash コマンドや nmap を利用できるようになる。\n\nfunction getIps() {\n  /*\n    * この関数は、実行端末と、ローカルネットワーク上の IP アドレスを取得する。\n    * この関数は、`arp -a` と `ifconfig` を実行し、\n    * それぞれのコマンドの出力から IP アドレスを取得する。\n    * この関数は、取得した IP アドレスを配列に格納し、\n    * その配列を返す。\n    * この関数は、`getIps` という名前でエクスポートされる。\n  */\n\n  const ips = []; // 取得した IP アドレスを格納する配列\n  const arpOutput = execSync('arp -a').toString(); // `arp -a` から IP アドレスを取得\n  // 改行コードで分割し、各行について処理を行う\n  arpOutput.split('\\n').forEach(line => {\n    const parts = line.split(' ');\n    if (parts.length > 1) {\n      const ip = parts[1].replace(/[()]/g, '');\n      ips.push(ip);\n    }\n  });\n  const ifconfigOutput = execSync('ifconfig').toString(); // ifconfig から IP アドレスを取得\n  ifconfigOutput.split('\\n').forEach(line => {\n    if (line.includes('inet ') && !line.includes('127.0.0.1')) {\n      const parts = line.trim().split(' ');\n      const ip = parts[1];\n      ips.push(ip);\n    }\n  });\n  return ips;\n}\n\n// 直接実行した場合に、IP アドレスを出力するデバックコード\nif (require.main === module) {\n  getIps().forEach(ip => console.log(ip));\n}\nexport { getIps };","map":{"version":3,"names":["execSync","getIps","ips","arpOutput","toString","split","forEach","line","parts","length","ip","replace","push","ifconfigOutput","includes","trim","require","main","module","console","log"],"sources":["/Users/sf/ghq/github.com/Fukuda-Sakito/device_scan/src/scripts/get_ips.ts"],"sourcesContent":["import { execSync } from 'child_process'; // Node で外部コマンドを実行するためのモジュール。bash コマンドや nmap を利用できるようになる。\n\nfunction getIps(): string[] {\n  /*\n    * この関数は、実行端末と、ローカルネットワーク上の IP アドレスを取得する。\n    * この関数は、`arp -a` と `ifconfig` を実行し、\n    * それぞれのコマンドの出力から IP アドレスを取得する。\n    * この関数は、取得した IP アドレスを配列に格納し、\n    * その配列を返す。\n    * この関数は、`getIps` という名前でエクスポートされる。\n  */\n\n  const ips: string[] = [];  // 取得した IP アドレスを格納する配列\n  const arpOutput: string = execSync('arp -a').toString();  // `arp -a` から IP アドレスを取得\n  // 改行コードで分割し、各行について処理を行う\n  arpOutput.split('\\n').forEach(line => {\n    const parts: string[] = line.split(' ');\n    if (parts.length > 1) {\n      const ip: string = parts[1].replace(/[()]/g, '');\n      ips.push(ip);\n    }\n  });\n\n  const ifconfigOutput: string = execSync('ifconfig').toString();  // ifconfig から IP アドレスを取得\n  ifconfigOutput.split('\\n').forEach(line => {\n    if (line.includes('inet ') && !line.includes('127.0.0.1')) {\n      const parts: string[] = line.trim().split(' ');\n      const ip: string = parts[1];\n      ips.push(ip);\n    }\n  });\n\n  return ips;\n}\n\n// 直接実行した場合に、IP アドレスを出力するデバックコード\nif (require.main === module) {\n  getIps().forEach(ip => console.log(ip));\n}\n\nexport { getIps };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe,CAAC,CAAC;;AAE1C,SAASC,MAAMA,CAAA,EAAa;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,MAAMC,GAAa,GAAG,EAAE,CAAC,CAAE;EAC3B,MAAMC,SAAiB,GAAGH,QAAQ,CAAC,QAAQ,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAE;EAC1D;EACAD,SAAS,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAACC,IAAI,IAAI;IACpC,MAAMC,KAAe,GAAGD,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC;IACvC,IAAIG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,EAAU,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;MAChDT,GAAG,CAACU,IAAI,CAACF,EAAE,CAAC;IACd;EACF,CAAC,CAAC;EAEF,MAAMG,cAAsB,GAAGb,QAAQ,CAAC,UAAU,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAE;EACjES,cAAc,CAACR,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAACC,IAAI,IAAI;IACzC,IAAIA,IAAI,CAACO,QAAQ,CAAC,OAAO,CAAC,IAAI,CAACP,IAAI,CAACO,QAAQ,CAAC,WAAW,CAAC,EAAE;MACzD,MAAMN,KAAe,GAAGD,IAAI,CAACQ,IAAI,CAAC,CAAC,CAACV,KAAK,CAAC,GAAG,CAAC;MAC9C,MAAMK,EAAU,GAAGF,KAAK,CAAC,CAAC,CAAC;MAC3BN,GAAG,CAACU,IAAI,CAACF,EAAE,CAAC;IACd;EACF,CAAC,CAAC;EAEF,OAAOR,GAAG;AACZ;;AAEA;AACA,IAAIc,OAAO,CAACC,IAAI,KAAKC,MAAM,EAAE;EAC3BjB,MAAM,CAAC,CAAC,CAACK,OAAO,CAACI,EAAE,IAAIS,OAAO,CAACC,GAAG,CAACV,EAAE,CAAC,CAAC;AACzC;AAEA,SAAST,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}