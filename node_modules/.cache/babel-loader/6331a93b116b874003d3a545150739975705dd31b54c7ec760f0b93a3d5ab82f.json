{"ast":null,"code":"/* eslint-disable no-unused-expressions */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync } from 'fs';\nimport { performNmapScan } from './perform_nmap_scan';\nasync function getIps() {\n  const pairs = [];\n  const arpOutput = execSync('arp -a').toString();\n  for (const line of arpOutput.split('\\n')) {\n    const parts = line.split(' ');\n    if (parts.length > 3) {\n      const ip = parts[1].replace(/[()]/g, '');\n      const ipParts = ip.split('.');\n      if (ipParts[3].length !== 3) {\n        // 既に同じ IP の要素が存在するか確認\n        if (!pairs.some(pair => pair.ip === ip)) {\n          const mac = parts[3];\n          const serviceInfo = await performNmapScan(ip);\n          pairs.push({\n            ip,\n            mac,\n            serviceInfo\n          });\n        }\n      }\n    }\n  }\n  return pairs;\n}\nif (require.main === module) {\n  getIps().then(pairs => {\n    pairs.forEach(pair => console.log(pair));\n\n    // JSON 形式でファイルに保存\n    writeFileSync('src/ips.json', JSON.stringify(pairs, null, 2));\n  });\n}\nexport { getIps };","map":{"version":3,"names":["execSync","writeFileSync","performNmapScan","getIps","pairs","arpOutput","toString","line","split","parts","length","ip","replace","ipParts","some","pair","mac","serviceInfo","push","require","main","module","then","forEach","console","log","JSON","stringify"],"sources":["/Users/sf/ghq/github.com/Fukuda-Sakito/device_scan/src/scripts/get_ips.ts"],"sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { exec } from 'child_process';\nimport { execSync } from 'child_process';\nimport { writeFileSync } from 'fs';\nimport { performNmapScan } from './perform_nmap_scan';\n\nexport type IpMacPair = {\n  ip: string;\n  mac: string;\n  serviceInfo: string;\n};\n\nasync function getIps(): Promise<IpMacPair[]> {\n  const pairs: IpMacPair[] = [];\n  const arpOutput: string = execSync('arp -a').toString();\n\n  for (const line of arpOutput.split('\\n')) {\n    const parts: string[] = line.split(' ');\n    if (parts.length > 3) {\n      const ip: string = parts[1].replace(/[()]/g, '');\n      const ipParts: string[] = ip.split('.');\n      if (ipParts[3].length !== 3) {\n        // 既に同じ IP の要素が存在するか確認\n        if (!pairs.some(pair => pair.ip === ip)) {\n          const mac: string = parts[3];\n          const serviceInfo: string = await performNmapScan(ip);\n          pairs.push({ ip, mac, serviceInfo });\n        }\n      }\n    }\n  }\n\n  return pairs;\n}\n\nif (require.main === module) {\n  getIps().then(pairs => {\n    pairs.forEach(pair => console.log(pair));\n\n    // JSON 形式でファイルに保存\n    writeFileSync('src/ips.json', JSON.stringify(pairs, null, 2));\n  });\n}\n\nexport { getIps };"],"mappings":"AAAA;;AAEA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,aAAa,QAAQ,IAAI;AAClC,SAASC,eAAe,QAAQ,qBAAqB;AAQrD,eAAeC,MAAMA,CAAA,EAAyB;EAC5C,MAAMC,KAAkB,GAAG,EAAE;EAC7B,MAAMC,SAAiB,GAAGL,QAAQ,CAAC,QAAQ,CAAC,CAACM,QAAQ,CAAC,CAAC;EAEvD,KAAK,MAAMC,IAAI,IAAIF,SAAS,CAACG,KAAK,CAAC,IAAI,CAAC,EAAE;IACxC,MAAMC,KAAe,GAAGF,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IACvC,IAAIC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,EAAU,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;MAChD,MAAMC,OAAiB,GAAGF,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC;MACvC,IAAIK,OAAO,CAAC,CAAC,CAAC,CAACH,MAAM,KAAK,CAAC,EAAE;QAC3B;QACA,IAAI,CAACN,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,EAAE;UACvC,MAAMK,GAAW,GAAGP,KAAK,CAAC,CAAC,CAAC;UAC5B,MAAMQ,WAAmB,GAAG,MAAMf,eAAe,CAACS,EAAE,CAAC;UACrDP,KAAK,CAACc,IAAI,CAAC;YAAEP,EAAE;YAAEK,GAAG;YAAEC;UAAY,CAAC,CAAC;QACtC;MACF;IACF;EACF;EAEA,OAAOb,KAAK;AACd;AAEA,IAAIe,OAAO,CAACC,IAAI,KAAKC,MAAM,EAAE;EAC3BlB,MAAM,CAAC,CAAC,CAACmB,IAAI,CAAClB,KAAK,IAAI;IACrBA,KAAK,CAACmB,OAAO,CAACR,IAAI,IAAIS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC,CAAC;;IAExC;IACAd,aAAa,CAAC,cAAc,EAAEyB,IAAI,CAACC,SAAS,CAACvB,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EAC/D,CAAC,CAAC;AACJ;AAEA,SAASD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}