{"ast":null,"code":"var _jsxFileName = \"/Users/sf/ghq/github.com/Fukuda-Sakito/device_scan/src/client/ScanResults.tsx\",\n  _s = $RefreshSig$();\nimport fs from 'fs';\nimport React, { useEffect, useState } from 'react';\nimport { getIps } from '../scripts/get_ips'; // getIps関数を適切な場所からインポートする\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScanResults = () => {\n  _s();\n  const [scanResults, setScanResults] = useState([]);\n  useEffect(() => {\n    // IPアドレスを取得\n    const ips = getIps();\n\n    // 各IPアドレスに対応するファイルからスキャン結果を読み込む\n    const results = [];\n    ips.forEach(ip => {\n      const fileName = `nmap_scan_${ip}.txt`;\n      try {\n        const data = fs.readFileSync(fileName, 'utf8');\n        results.push(data);\n      } catch (error) {\n        console.error(`Error reading file ${fileName}:`, error);\n      }\n    });\n    setScanResults(results);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scan Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), scanResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: result\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ScanResults, \"TnoQ7VFITYVyCEabVrqJE1p7aY0=\");\n_c = ScanResults;\nexport default ScanResults;\nvar _c;\n$RefreshReg$(_c, \"ScanResults\");","map":{"version":3,"names":["fs","React","useEffect","useState","getIps","jsxDEV","_jsxDEV","ScanResults","_s","scanResults","setScanResults","ips","results","forEach","ip","fileName","data","readFileSync","push","error","console","children","_jsxFileName","lineNumber","columnNumber","map","result","index","_c","$RefreshReg$"],"sources":["/Users/sf/ghq/github.com/Fukuda-Sakito/device_scan/src/client/ScanResults.tsx"],"sourcesContent":["import fs from 'fs';\nimport React, { useEffect, useState } from 'react';\nimport { getIps } from '../scripts/get_ips'; // getIps関数を適切な場所からインポートする\n\nconst ScanResults = () => {\n  const [scanResults, setScanResults] = useState<string[]>([]);\n\n  useEffect(() => {\n    // IPアドレスを取得\n    const ips = getIps();\n\n    // 各IPアドレスに対応するファイルからスキャン結果を読み込む\n    const results: string[] = [];\n    ips.forEach(ip => {\n      const fileName = `nmap_scan_${ip}.txt`;\n      try {\n        const data = fs.readFileSync(fileName, 'utf8');\n        results.push(data);\n      } catch (error) {\n        console.error(`Error reading file ${fileName}:`, error);\n      }\n    });\n\n    setScanResults(results);\n  }, []);\n\n  return (\n    <div>\n      <h1>Scan Results</h1>\n      {scanResults.map((result, index) => (\n        <pre key={index}>{result}</pre>\n      ))}\n    </div>\n  );\n};\n\nexport default ScanResults;\n"],"mappings":";;AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAW,EAAE,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,GAAG,GAAGP,MAAM,CAAC,CAAC;;IAEpB;IACA,MAAMQ,OAAiB,GAAG,EAAE;IAC5BD,GAAG,CAACE,OAAO,CAACC,EAAE,IAAI;MAChB,MAAMC,QAAQ,GAAI,aAAYD,EAAG,MAAK;MACtC,IAAI;QACF,MAAME,IAAI,GAAGhB,EAAE,CAACiB,YAAY,CAACF,QAAQ,EAAE,MAAM,CAAC;QAC9CH,OAAO,CAACM,IAAI,CAACF,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAE,sBAAqBJ,QAAS,GAAE,EAAEI,KAAK,CAAC;MACzD;IACF,CAAC,CAAC;IAEFT,cAAc,CAACE,OAAO,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAY;MAAAN,QAAA,EAAAO,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBf,WAAW,CAACgB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC7BrB,OAAA;MAAAe,QAAA,EAAkBK;IAAM,GAAdC,KAAK;MAAAZ,QAAA,EAAAO,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAC/B,CAAC;EAAA;IAAAT,QAAA,EAAAO,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChB,EAAA,CA9BID,WAAW;AAAAqB,EAAA,GAAXrB,WAAW;AAgCjB,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}